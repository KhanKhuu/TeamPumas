#include <iostream>
#include "myVector.h"
using namespace std;

void printMap(const myVector<myVector<bool>> &board) {
	for (int i = 0; i < board.size(); i++) {
		for (int j = 0; j < board.at(i).size(); j++) {
			cout << board.at(i).at(j) << " ";
		}
		cout << endl;
	}
	cout << endl;
}

bool check(const myVector<myVector<bool>> &board, int row, int col, const int n) {
	bool queenFound = false;
	// check for all position diagonally to the left \ 
	for (int i = row - 1, j = col - 1; i >= 0 && !queenFound && j >= 0; i--, j--) {
		if (board.at(i).at(j) == true) {
			queenFound = true;
		}
	}
	// check for all positions above |
	for(int i = row - 1; i >= 0 && !queenFound; i--) {
		if (board.at(i).at(col) == true) {
			queenFound = true;
		}
	}
	//check for all positions diagonally to the right /
	for (int i = row - 1, j = col + 1; i >= 0 && !queenFound && j < n; i--, j++) {
		if (board.at(i).at(j))
			queenFound = true;
	}
	return !queenFound;
}


int findQueenColumn(myVector<myVector<bool>> &board, int &row, const int n) {
	int queenColumn = 0;
	for (int i = 0; i < n && !board.at(row).at(i); i++) {
		queenColumn += 1;
	}
	board.pop_back();
	return queenColumn;
}

void backtrack(myVector<myVector<bool>> &board, int &row) {
	board.pop_back();
	row--;
}

bool placeQueen(myVector<myVector<bool>> &board, const int n, int &row, int col = 0) {
	bool queenPlaced = false;
	board.push_back(myVector<bool>(n, 0));
	for (; col < n && !queenPlaced; col++) {
		if (check(board, row, col, n)) {
			board.at(row).at(col) = true;
			queenPlaced = true;
		}
	}
	while (!queenPlaced) {
		backtrack(board, row);
		queenPlaced = placeQueen(board, n, row, findQueenColumn(board, row, n) + 1);
	}
	return queenPlaced;
}


int main() {
	// create the stack
	myVector<myVector<bool>> board;

	// obtain number of N
	int n = 0;
	cout << "Enter number of N, higher than 3: ";
	cin >> n;
	cin.ignore(1000, 10);

	//initialize filled to 0
	int filled = 0;
	
	// place the queens
	while (filled != n) {
		if (placeQueen(board, n, filled)) {
			filled++;
		}
		else {
			backtrack(board, filled);
			placeQueen(board, n, filled, findQueenColumn(board, filled, n) + 1);
			filled++;
		}
	}

	// print out the solution
	cout << n << " X " << n << " board:" << endl << endl;
	printMap(board);
	return 0;
}
